Client
======

Client connects to server
{
	Connects to server
	Display Server name and IP Address
}
Mic Session Request
{
	Get Client Socket descriptor and other resources
	Create an array packet
	insert a voice chat request ID
	
	Send off the packet to the server
	Wait until it receives a response (blocked)
	If it receives an acknowledgement
	{
		Call Mic Session created/initialized function		
	}
}

Server
======

Server Waits for Client Connections
{
	Listen for client connections
	new socket descriptor accepts the client
	Display IP Address
}

Process Client Request
{
	Get Server Socket descriptor and other resources
	Waits until it receives a request from the client
	If the request is a voice chat request ID
	{
		Echo back to client the request ID
		Create UDP Socket()
		Call Mic Session created/initialized function
	}
	
}

Both Client & Server
====================
Mic Session created/initialized (client/server)
{	
	Create one thread that starts (monitoring for data from socket()) 
	Create another thread that starts (monitoring for mic input())
}
Monitor Mic Input (thread function) (Both Client/Server)
{

	if there is an input device
	while true
	{
		Call WavInOpen function
		store audio in buffer
		call send audio data/packets function()
	}	
}
Monitor packets for Data (thread function) (Both Client/Server)
{
	Initialize Socket Attributes
	Bind passed in socket
	while true
	{
		If we received something from the socket
		store packets in buffer
		The Buffering sound and playback completion callback routine will handle this
		
	}
	close socket descriptor if an error occurred
}
Send Audio Data/Packets (Both Client/Server)
{
	Get Socket Descriptor and other resources
	Send to the client/server
}

Buffering Sound and Playback
{
	Pass in Sound Buffer

	if we received something from the buffer and output device is detected
	Playback audio buffer
	clear buffer
}

Create UDP Socket
{
	Create UDP Socket
}

Bind Socket
{
	Bind UDP Socket
}


Playback Audio function
{
	if there is an output device
		Call WaveOutOpen function
}